Project Euler Problem 21: Amicable Numbers

My original program for solving this problem worked, but violated the 
"One Minute Rule" severely, clocking-in at about 15 minutes:

[code=C++]
/*****************************************************************************\
 * Program name:  Euler 21 - Amicable Numbers
 * Description:   Prints sum of Amicable numbers under 10000.
 * File name:     Euler-021_Amicable-Numbers.cpp
 * Source for:    Euler-021_Amicable-Numbers.exe
 * Author:        Robbie Hatley
 * Edit history:
 *    Wed Jan 10, 2018: Wrote it.
\*****************************************************************************/

#include <iostream>
#include <unordered_set>

int d (int x)
{
   int d = 0;
   int a;
   for ( a = 1 ; a < x ; ++a )
   {
      if ( 0 == x % a )
      {
         d += a;
      }
   }
   return d;
}

int are_amicable (int a, int b)
{
   return d(a) == b && d(b) == a;
}

int main(void)
{
   int s = 0;
   int a = 0;
   int b = 0;
   std::unordered_multiset<int> AmicableNumbers;
   for ( a = 1 ; a < 10000 ; ++a )
   {
      for ( b = a + 1 ; b < 10000 ; ++b )
      {
         if (are_amicable(a,b))
         {
            std::cout << "Amicable pair: " << a << " " << b << std::endl;
            AmicableNumbers.insert(a);
            AmicableNumbers.insert(b);
         }
      }
   }
   for ( a = 1 ; a < 10000 ; ++a )
   {
      if (AmicableNumbers.find(a) != AmicableNumbers.end())
      {
         s += a;
      }
   }
   std::cout << "Sum of all amicable numbers under 10000 = " << s << std::endl;
   return 0;
}
[/code]

The 15-minute expended time obviously meant that I was doing something 
highly suboptimal, so I started asking myself how I could speed this up.

The first question that occurred to me was, is it even *possible* for 
more than 2 numbers to be "amicable" with each other? And I quickly 
realized that it is not. If two numbers are "amicable", then they can 
be amicable with no other numbers, because if div_sum(a) is b, then 
no number other than b can be div_sum(a); and if div_sum(b) is a, then 
no number other than a can be div_sum(b). This is because "sum of divisors" 
for any integer x is invariant. So there are no amicable trios, quartets, 
etc, only pairs.

Hence, I realized I could dispense with C++'s "unordered_multiset" and just 
add amicable numbers directly to a simple int sum. And since I no-longer 
needed fancy containers, I also reverted the program from C++ to C. But it 
was still running slow, taking several minutes.

So I asked myself, "What can I do to speed up finding 'sum of divisors' 
for each integer?" The first thing that occurred to me was, if a is a 
divisor of x, then so is x/a. So for each divisor a (other than 1) I found, 
I added both a AND x/a to the sum. 

The next thing I realized was, there was no need to check for divisors over 
sqrt(x), and that making the limitation "a <= sqrt(x)" would cut time 
expenditure down by about an order of magnitude. 

So I made those changes, and time expended went down from about 15 minutes 
to 14 seconds!

But it occured to me that sqrt() takes time to compute, so I changed the 
limit from "a <= sqrt(x)" to "a * a <= x". Time expenditure went down to 
11 seconds:

[code=C]
/*****************************************************************************\
 * Program name:  Euler 21 - Amicable Numbers
 * Description:   Prints sum of Amicable numbers under 10000.
 * File name:     Euler-021_Amicable-Numbers.c
 * Source for:    Euler-021_Amicable-Numbers.exe
 * Author:        Robbie Hatley
 * Edit history:
 *    Wed Jan 10, 2018: Wrote it.
 *    Wed Jan 10, 2018: Converted from C++ to C and limited divisor checks.
\*****************************************************************************/

#include <stdio.h>
#include <time.h>

int div_sum (int x);
int are_amicable (int a, int b);

// Return sum of proper divisors of a number:
int div_sum (int x)
{
   int sum = 0;
   int a;
   int x_a;
   for ( a = 1 ; a * a <= x ; ++a )
   {
      if ( 0 == x % a )
      {
         x_a = x/a;
         if (a == 1)
         {
            sum += a; 
            continue;
         }
         else if (a < x_a)
         {
            sum += a; 
            sum += x_a; 
            continue;
         }
         else if (a == x_a) 
         {
            sum += a; 
            break;
         }
         else
         {
            break;
         }
      }
   }
   return sum;
}

// Are two numbers amicable? (If they are, then they can be amicable with
// no other numbers, because if div_sum(a) is b, then no number other than
// b can be div_sum(a); an if div_sum(b) is a, then no number other than
// a can be div_sum(b). This is because "sum of divisors" for any integer x
// is invariant. So there are no amicable trios, quartets, etc, only pairs.)
int are_amicable (int a, int b)
{
   return div_sum(a) == b && div_sum(b) == a;
}

int main(void)
{
   int     s   = 0;
   int     a   = 0;
   int     b   = 0;
   time_t  t0  = time(NULL);
   
   for ( a = 1 ; a < 10000 ; ++a )
   {
      for ( b = a + 1 ; b < 10000 ; ++b )
      {
         if (are_amicable(a,b))
         {
            printf("Amicable pair: %d %d\n", a, b);
            s += a;
            s += b;
         }
      }
   }
   printf("Sum of all amicable numbers under 10000 = %d\n", s);
   printf("Expired time = %ld seconds\n", time(NULL)-t0);
   return 0;
}
[/code]

But then it occurred to me that there is no need to re-calculate 
sum-of-divisors for any integer, ever, because I could dump the sums into 
a simple C array. That would decrease time expenditure ENORMOUSLY, because 
the code above is performing "sum-of-divisors" calculations approximately 
10000^2 or 100,000,000 times! So I should be able to cut time expenditure 
by 4 orders of magnitude by putting the sums of divisors in an array just 
ONCE and referring to array elements instead of recalculating. I did that, 
and time expenditure went from 11 seconds to 31ms. Blazing-fast code follows:

[code=C]
/*****************************************************************************\
 * Program name:  Euler 21 - Amicable Numbers
 * Description:   Prints sum of Amicable numbers under 10000.
 * File name:     Euler-021_Amicable-Numbers-c2.c
 * Source for:    Euler-021_Amicable-Numbers.exe
 * Author:        Robbie Hatley
 * Edit history:
 *    Wed Jan 10, 2018: Wrote it.
 *    Wed Jan 10, 2018: Limited divisor checks and converted from C++ to C.
 *    Wed Jan 10, 2018: Created array of sums-of-divisors, so that no number
 *                      has it's sum-of-divisors calculated more than once.
\*****************************************************************************/

#include <stdio.h>
#include <time.h>

int div_sum (int x);
int are_amicable (int a, int b);

/* Global Variables: */
int divsums[10005] = {0};

/* Return sum of proper divisors of a number: */
int div_sum (int x)
{
   int sum = 0;
   int a;
   int x_a;
   for ( a = 1 ; a * a <= x ; ++a )
   {
      if ( 0 == x % a )
      {
         x_a = x/a;
         if (a == 1)
         {
            sum += a; 
            continue;
         }
         else if (a < x_a)
         {
            sum += a; 
            sum += x_a; 
            continue;
         }
         else if (a == x_a) 
         {
            sum += a; 
            break;
         }
         else
         {
            break;
         }
      }
   }
   return sum;
}

// Are two numbers amicable? (If they are, then they can be amicable with
// no other numbers, because if div_sum(a) is b, then no number other than
// b can be div_sum(a); an if div_sum(b) is a, then no number other than
// a can be div_sum(b). This is because "sum of divisors" for any integer x
// is invariant. So there are no amicable trios, quartets, etc, only pairs.)
int are_amicable (int a, int b)
{
   return divsums[a] == b && divsums[b] == a;
}

int main(void)
{
   int     s   = 0;
   int     a   = 0;
   int     b   = 0;
   time_t  t0  = time(NULL);

   /* Calculate sum-of-divisors for each integer 1-9999: */
   for ( a = 1 ; a < 10000 ; ++a ) {divsums[a] = div_sum(a);}

   /* Calculate and print sum of all amicable positive integers under 10000
   by looking-up their amicability in the array we just created: */
   for ( a = 1 ; a < 10000 ; ++a )
   {
      for ( b = a + 1 ; b < 10000 ; ++b )
      {
         if (are_amicable(a,b))
         {
            printf("Amicable pair: %d %d\n", a, b);
            s += a;
            s += b;
         }
      }
   }
   printf("Sum of all amicable numbers under 10000 = %d\n", s);
   printf("Expired time = %ld seconds\n", time(NULL)-t0);
   return 0;
}
[/code]

The time duration is now about 0.03 seconds:

Amicable pair: 220 284
Amicable pair: 1184 1210
Amicable pair: 2620 2924
Amicable pair: 5020 5564
Amicable pair: 6232 6368
Sum of all amicable numbers under 10000 = 31626
Expired time = 0.031000 seconds
