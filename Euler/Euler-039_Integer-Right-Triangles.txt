Project Euler Problem 39: Integer Right Triangles

If p is the perimeter of a right angle triangle with integral length sides, 
{a,b,c}, there are exactly three solutions for p = 120.

{20,48,52}, {24,45,51}, {30,40,50}

For which value of p â‰¤ 1000, is the number of solutions maximized?

RH Analysis: 

c = sqrt(a^2+b^2), p = a + b + sqrt(a^2+b^2), so only a and b are
independent variables. 

One approach would be to form a table of perfect squares and attempt
to find (a^2+b^2) in that table. The downside is time used to make
the table, and more time used to look things up in it.

Another approach is to do this:
int IsSol(int a, int b)
{
   int c = int(floor(sqrt(a^2+b^2)));
	if (a*a + b*b == c*c) {return 1;}
	else                  {return 0;}
}
The downsides are, we don't know in advance what the perimeter is,
and we use floating-point math and the C math library.

A third approach would be to first iterate by perimeters, then
form all possible integer triangles with that perimeter,  then
see if any are right triangles (a*a + b*b == c*c). This approach
has the advantage of knowing perimeter in advance, and of using
only integer arithmetic (no floating-point, no math library
functions). Let's try this. Since we're only counting solutions,
let's use C.
