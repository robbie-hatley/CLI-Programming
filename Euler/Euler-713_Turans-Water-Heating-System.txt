Project Euler Problem 713: Turán's water heating system

===============================================================================
Problem Statement:

Turán has the electrical water heating system outside his house in a shed. 
The electrical system uses two fuses in series, one in the house and one in 
the shed. (Nowadays old fashioned fuses are often replaced with reusable mini 
circuit breakers, but Turán's system still uses old fashioned fuses.) For the 
heating system to work both fuses must work.

Turán has n fuses. He knows that m of them are working and the rest are blown. 
However, he doesn't know which ones are blown. So he tries different 
combinations until the heating system turns on.

We denote by T(n,m) the smallest number of tries required to ensure the heating 
system turns on. T(3,2)=3 and T(8,4)=7.

Let L(n) be the sum of all T(n,m) for 2 <= m <= n. 

L(10^3)=3281346

Find L(10^7)

===============================================================================
Notes:

"Turán" refers to https://en.wikipedia.org/wiki/Pál_Turán .

The number of 2-element subsets of n fuses is 
comb(n,2) = n!/(2!(n-2)!) = Sigma[k=1->n-1](k) = n(n-1)/2

If m fuses are good then b=n-m are bad. 

The number of 2-element subsets including at least one bad fuse is
each fuse in the "bad" group on the left coupled with each fuse to
it's right, which is:
(n-1) + (n-2) + ... + (n-(n-m)) = (n-m)(n+m-1)/2

Hence if one takes the approach of just trying each fuse as Fuse1
in combination with each other fuse as Fuse2, throwing each Fuse1
which doesn't work with ANY Fuse2 into a "discard" pile, until a
working combination is found, then "the smallest number of tries
required to ensure the heating system turns on" would be 
T(n,m) = (n-m)(n+m-1)/2 + 1

However, while that matches "T(3,2)=3", it does NOT match "T(8,4)=7".

Ah, the problems says "Turán... KNOWS that m of [the fuses] are working".
That changes everything. Now, Turán can safely discard m-2 fuses from his
fuse pool into the discard pool before ever trying any combinations,
because he knows that that would leave at least 2 good fuses in his
candidate pool. Then he only needs try comb(n-(m-2),2)=(n-m+2)(n-m+1)/2
combinations. That gives T(3,2) = 3 and T(8,4) = 15. Hmmm. The first
matches but the second doesn't. What else does Turan know that I don't?

Well, he could try combos from a batch of n-m fuses from his pool, and if that
doesn't work, then he knows there can be no more than 1 good fuse in that
batch. But what does that gain him?

He could try smaller batches, say, batches where the batch size is roughly
equal to the number of batches. But what information would that gain him?
He could end up with no matches in any batch, unless m > #batches.

Hmmm. If m > 0.5n, then he could split the fuses into pairs adn check those,
and one of those MUST be a working pair, so T(8,5)=4.

If m=0.5n then splitting the fuses into pairs would also be good, because
the worst that could happen is that no pair works, but that would give the
information that every pair has one good and one bad fuse. Then just 4 more
checks (max) would yield a good pair. This would give T(8,4)=8. That's CLOSE
to the "T(8,4)=7" given by the problem statement, but not quite. 

In the case of T(8,4), we could split the pool into 3 groups with size as equal
as possible. That would give groups of sizes 3,3,2. And ONE of those groups
MUST contain a valid pair! That would give T(8,4)=7, as given by the problem
statement. 

Let's see what this "m-1 groups" method implies for n=8,9,10:

T(8,2): 1 group:  8             (28 tries)
T(8,3): 2 groups: 4,4           (12 tries)
T(8,4): 3 groups: 3,3,2         ( 7 tries)
T(8,5): 4 groups: 2,2,2,2       ( 4 tries)
T(8,6): 5 groups: 2,2,2,1,1     ( 3 tries)
T(8,7): 6 groups: 2,2,1,1,1,1   ( 2 tries)
T(8,8): 7 groups: 2,1,1,1,1,1,1 ( 1 try  )

T(9,2): 1 group:  9               (36 tries)
T(9,3): 2 groups: 5,4             (16 tries)
T(9,4): 3 groups: 3,3,3           ( 9 tries)
T(9,5): 4 groups: 3,2,2,2         ( 6 tries)
T(9,6): 5 groups: 2,2,2,2,1       ( 4 tries)
T(9,7): 6 groups: 2,2,2,1,1,1     ( 3 tries)
T(9,8): 7 groups: 2,2,1,1,1,1,1   ( 2 try  )
T(9,9): 8 groups: 2,1,1,1,1,1,1,1 ( 1 try  )

T(10, 2): 1 group:  10                (45 tries)
T(10, 3): 2 groups: 5,5               (20 tries)
T(10, 4): 3 groups: 4,3,3             (12 tries)
T(10, 5): 4 groups: 3,3,2,2           ( 8 tries)
T(10, 6): 5 groups: 2,2,2,2,2         ( 5 tries)
T(10, 7): 6 groups: 2,2,2,2,1,1       ( 4 tries)
T(10, 8): 7 groups: 2,2,2,1,1,1,1     ( 3 try  )
T(10, 9): 8 groups: 2,2,1,1,1,1,1,1   ( 2 try  )
T(10,10): 9 groups: 2,1,1,1,1,1,1,1,1 ( 1 try  )

Clearly for m-1 >= ceiling(n/2), "number of tries" is just n-m+1.

But for m-1 < ceiling(n/2), it gets a bit more messy. 
It appears that "number of tries" = r*comb(q+1,2)+(m-1-r)*comb(q,2)
where:
q = n/(m-1) (integer division)
r = n%(m-1) (modulus)

So a program to solve problem 713 would look like this:

[code=C]
// This is a 79-character-wide ASCII-encoded C source-code file.
// Euler-713_Turans-Water-Heating-System.c
// Solves Project Euler Problem 713: Turan's Water Heating System
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// How many combinations of k things from a set of n exist?
unsigned long comb (unsigned long n, unsigned long k)
{
   unsigned long num = 1;
   unsigned long den = 1;
   unsigned long i   = 0;
   for ( i = n - k + 1 ; i <= n ; ++i )
   {
      num *= i;
   }
   for ( i = 1 ; i <= k ; ++i )
   {
      den *= i;
   }
   return num/den;
} // end comb

uint64_t T (uint64_t n, uint64_t m)
{
   if (m-1 >= (uint64_t)ceil((double)n/2.0))
      return n-m+1;
   else
   {
      uint64_t q = n/(m-1);
      uint64_t r = n%(m-1);
      return r*comb(q+1,2)+(m-1-r)*comb(q,2);
   }
}

uint64_t L (uint64_t n)
{
   uint64_t  m    = 0ul;
   uint64_t  Sum  = 0ul;
   for ( m = 2ul ; m <= n ; ++m )
   {
      Sum += T(n,m);
   }
   return Sum;
}

int main (int Beren, char ** Luthien)
{
   uint64_t  n    = 0ul;
   uint64_t  Sum  = 0ul;
   if (2ul != Beren) {return 1;}
   n = (uint64_t)strtoul(Luthien[1],NULL,10);
   if (n<2ul || n>10000000ul) {exit(EXIT_FAILURE);}
   Sum = L(n);
   printf("T(%lu,%lu) = %lu\n", 3ul, 2ul, T(3ul,2ul));
   printf("T(%lu,%lu) = %lu\n", 8ul, 4ul, T(8ul,4ul));
   printf("L(%lu) = %lu\n", n, Sum);
   exit(EXIT_SUCCESS);
}
[/code]

On running that for 1000, do I get 3281346? Yes!

On running that for 10000000 (took a tiny fraction of a second), 
I get 788626351539895. Is this correct? Yes!
