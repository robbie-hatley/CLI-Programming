Euler-051_Prime-Digit-Replacements.txt

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Statement Of Problem:

By replacing the 1st digit of the 2-digit number *3, it turns out that six 
of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.

By replacing the 3rd and 4th digits of 56**3 with the same digit, this 
5-digit number is the first example having seven primes among the ten 
generated numbers, yielding the family: 56003, 56113, 56333, 56443, 
56663, 56773, and 56993. Consequently 56003, being the first member of 
this family, is the smallest prime with this property.

Find the smallest prime which, by replacing part of the number (not 
necessarily adjacent digits) with the same digit, is part of an eight 
prime value family.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RH Analysis:

Since the members of a "prime family" as described above can be made from
each other by replacing a number of digits, at least 1 and at most n-1
(where n is the number of digits), the numbers of digits of such a "family" 
must all be the same. (The limit is n-1 because a number consisting of 
n digits, all the same, would be divisible by that digit, hence not prime.)

Actually, an exception to that is replacement of the left-most digit with 0,
which would yield a number with a smaller number of significant figures, 
maybe MUCH smaller if the number has a lot of zeros in it already. Eg, 100003
becomes just 3 if the 1 is replaced by 0. (And 3 and 100003 are both prime.)

Some of the phrases in the problem are ambiguous: 

What is "part of the number"? 
Digits? If so: How many? Which? 

What is "the same digit"? WHAT is "same" as WHAT?

Am I to interpret "the same digit" to mean that AT-LEAST-TWO digits
of the original number are to be replaced by this "the same digit"
digit (ie, that the two+ replacement digits are "the same" as each other)?
I can proceed on that working assumption, but if it turns our that
the author meant [1,n-1] rather than [2,n-1] as the range of number
of digits to be replaced, my answer may turn-out to be wrong, in which case
I'll have to alter my program and try again.

But no, I'll assume [1,n-1] to start, because the author DID include,
as his/her first example, a 1-digit replacement scenario. I'll assume that
the "single-digit" scenario is just a "degenerate" case of the the word "same".
(After all, any thing n is "the same as" itself.)

The out-most loop of this program should be a three-part iterating over the
number of digits. Start with 3 (since there are only 4 1-digit prime
numbers, and the largest "family" in the 2-digit numbers only has 6 members)
and go up to 10. (If necessary I can increase the max digits later.)
static unsigned long int  Families[10000][10]={{0}};
int Census[10000] = {0};
for ( n = 3 ; n <= 10 ; ++n )

Inside that outer loop will be another three-part loop specifying how many of
the digits are to be replaced; this will range from 1 through n-1:
for ( i = 1 ; i < n ; ++i )

So, what goes INSIDE the middle for loop? How shall I decide which digits to
replace? Nested for loops won't work in this context because the degree of
nesting would be different for each i. (If i is 3, we need j, k, l. If i is 4, 
we need j, k, l, m. If i is 5, we need j, k, l, m, n. etc.)

So, how about NOT using a for loop ranging from 1 through n-1 containing
nested for loops? How about using a SINGLE for loop for all of the digit
replacement patterns of all lengths from 1 though n-1? I can see an easy way to
do that: binary numbers! The digit replacement patterns will be isomorphic
to the set {binary representations of even integers >= 2 and <= 2**n-2}.

Note that ODD replacement patterns won't work, because the largest families
of prime numbers having different rightmost digits will never have more than
4 members (because all primes in in 1, 3, 7, or 9), and we're looking for 8.

And if the leftmost digit is a "replacement" digit, then a replacement of 0
can't be used, else the numbers in the "family" wouldn't have the same number
of digits, and the larger numbers couldn't be said to be formed by "replacing
part of the number", as an extra digit tacked onto the left can hardly be said
to be "part of" the smallest family member.

So have for loop iterating through the possible patterns like so:
int lower_limit = 2; // right digit can NOT be replacement digit!
int upper_limit = 2**n-2; // 2**6-1 would be 0b111111 which is not allowed
int pattern;
for ( pattern = lower_limit ; pattern <= upper_limit ; pattern )

The, inside those two loops, a triple-nested loop from 0 through 9 applying
the replacements, containing a quadruple-nested loop filtering the 
replacements to just those digits specified by pattern:
int r; // replacement digit
int d; // digit position
for ( r = 0 ; r <=9 ; ++r )
{
   // Can't use 0 if leftmost column is replacement column:
   if ((1<<(n-1) & pattern) && 0==r)
   {
      continue; // can't replace left column with 0
   }
   for ( d = 0 ; d <= n-1 ; ++ )
   {
      if (1<<d & pattern)
      {
         replace digit in 10^d column with r;
      }
   }
   if (resulting number is prime)
   {
      push onto container of prime family members for this seed+pattern
   }
}
How many members in that family?

It occurs to me that each such "family" is uniquely specified by just three
things: 
1. Number of digits "n"
2. Replacement pattern "pattern"
3. Digit pattern in non-replaced columns "seed"

Or, alternatively, these two things:
1. Original n-digit prime number "orig"
2. Replacement pattern "pattern"

I like the first approach better. The second approach has the flaw that only
those "original" numbers that actually are prime could be members of
"prime number families". So let's go with a C program using that approach:
