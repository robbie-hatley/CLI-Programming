#! /usr/bin/perl
# Euler-061_Cyclical-Figurate-Numbers.pl

=pod

Triangle, square, pentagonal, hexagonal, heptagonal, and 
octagonal numbers are all figurate (polygonal) numbers 
and are generated by the following formulae:
Triangle    P3,n=n(n+1)/2   1, 3,  6, 10, 15, ...
Square      P4,n=n^2        1, 4,  9, 16, 25, ...
Pentagonal  P5,n=n(3n-1)/2  1, 5, 12, 22, 35, ...
Hexagonal   P6,n=n(2n-1)    1, 6, 15, 28, 45, ...
Heptagonal  P7,n=n(5n-3)/2  1, 7, 18, 34, 55, ...
Octagonal   P8,n=n(3n-2)    1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, 
has three interesting properties.

   1. The set is cyclic, in that the last two digits of each 
      number is the first two digits of the next number 
      (including the last number with the first).

   2. Each polygonal type: triangle (P3,127=8128), square 
      (P4,91=8281), and pentagonal (P5,44=2882), is represented 
      by a different number in the set.

   3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit 
numbers for which each polygonal type: triangle, square, 
pentagonal, hexagonal, heptagonal, and octagonal, is 
represented by a different number in the set.

=cut

use v5.36;

my @P3; my @P4; my @P5; my @P6; my @P7; my @P8;

sub P3 ($n) { return $n*($n+1)/2   }
sub P4 ($n) { return $n*$n         }
sub P5 ($n) { return $n*(3*$n-1)/2 }
sub P6 ($n) { return $n*(2*$n-1)   }
sub P7 ($n) { return $n*(5*$n-3)/2 }
sub P8 ($n) { return $n*(3*$n-2)   }

sub FillP3
{
   for ( my $i = 10 ; $i <= 1000 ; ++$i )
   {
      my $P3 = P3($i);
      next if $P3 < 1000;
      last if $P3 > 9999;
      push @P3, $P3;
   }
}

sub FillP4
{
   for ( my $i = 10 ; $i <= 1000 ; ++$i )
   {
      my $P4 = P4($i);
      next if $P4 < 1000;
      last if $P4 > 9999;
      push @P4, $P4;
   }
}

sub FillP5
{
   for ( my $i = 10 ; $i <= 1000 ; ++$i )
   {
      my $P5 = P5($i);
      next if $P5 < 1000;
      last if $P5 > 9999;
      push @P5, $P5;
   }
}

sub FillP6
{
   for ( my $i = 10 ; $i <= 1000 ; ++$i )
   {
      my $P6 = P6($i);
      next if $P6 < 1000;
      last if $P6 > 9999;
      push @P6, $P6;
   }
}

sub FillP7
{
   for ( my $i = 10 ; $i <= 1000 ; ++$i )
   {
      my $P7 = P7($i);
      next if $P7 < 1000;
      last if $P7 > 9999;
      push @P7, $P7;
   }
}

sub FillP8
{
   for ( my $i = 10 ; $i <= 1000 ; ++$i )
   {
      my $P8 = P8($i);
      next if $P8 < 1000;
      last if $P8 > 9999;
      push @P8, $P8;
   }
}

sub isP3 ($x) {for (@P3) {return 1 if $x == $_} return 0}
sub isP4 ($x) {for (@P4) {return 1 if $x == $_} return 0}
sub isP5 ($x) {for (@P5) {return 1 if $x == $_} return 0}
sub isP6 ($x) {for (@P6) {return 1 if $x == $_} return 0}
sub isP7 ($x) {for (@P7) {return 1 if $x == $_} return 0}
sub isP8 ($x) {for (@P8) {return 1 if $x == $_} return 0}

for ( my $seed1 = 10 ; $seed1 <= 99 ; ++$seed1 )
{
   for ( my $seed2 = 10 ; $seed2 <= 99 ; ++$seed2 )
   {
      next if $seed2 == $seed1;
      for ( my $seed3 = 10 ; $seed3 <= 99 ; ++$seed3 )
      {
         next if $seed3 == $seed2;
         for ( my $seed4 = 10 ; $seed4 <= 99 ; ++$seed4 )
         {
            next if $seed4 == $seed3;
            for ( my $seed5 = 10 ; $seed5 <= 99 ; ++$seed5 )
            {
               next if $seed5 == $seed4;
               for ( my $seed6 = 10 ; $seed6 <= 99 ; ++$seed6 )
               {
                  next if  $seed6 == $seed5 || $seed1 == $seed6;
                  my $x1 = 100*$seed1+$seed2;
                  my $x2 = 100*$seed2+$seed3;
                  my $x3 = 100*$seed3+$seed4;
                  my $x4 = 100*$seed4+$seed5;
                  my $x5 = 100*$seed5+$seed6;
                  my $x6 = 100*$seed6+$seed1;
                  say STDERR "$x1, $x2, $x3, $x4, $x5, $x6";
                  my $p3c = 0;
                  my $p4c = 0;
                  my $p5c = 0;
                  my $p6c = 0;
                  my $p7c = 0;
                  my $p8c = 0;
                  ++$p3c if isP3($x1);
                  ++$p4c if isP4($x1);
                  ++$p5c if isP5($x1);
                  ++$p6c if isP6($x1);
                  ++$p7c if isP7($x1);
                  ++$p8c if isP8($x1);
                  ++$p3c if isP3($x2);
                  ++$p4c if isP4($x2);
                  ++$p5c if isP5($x2);
                  ++$p6c if isP6($x2);
                  ++$p7c if isP7($x2);
                  ++$p8c if isP8($x2);
                  ++$p3c if isP3($x3);
                  ++$p4c if isP4($x3);
                  ++$p5c if isP5($x3);
                  ++$p6c if isP6($x3);
                  ++$p7c if isP7($x3);
                  ++$p8c if isP8($x3);
                  ++$p3c if isP3($x4);
                  ++$p4c if isP4($x4);
                  ++$p5c if isP5($x4);
                  ++$p6c if isP6($x4);
                  ++$p7c if isP7($x4);
                  ++$p8c if isP8($x4);
                  ++$p3c if isP3($x5);
                  ++$p4c if isP4($x5);
                  ++$p5c if isP5($x5);
                  ++$p6c if isP6($x5);
                  ++$p7c if isP7($x5);
                  ++$p8c if isP8($x5);
                  ++$p3c if isP3($x6);
                  ++$p4c if isP4($x6);
                  ++$p5c if isP5($x6);
                  ++$p6c if isP6($x6);
                  ++$p7c if isP7($x6);
                  ++$p8c if isP8($x6);
                  if ( 1 == $p3c && 1 == $p4c && 1 == $p5c && 1 == $p6c && 1 == $p7c && 1 == $p8c )
                  {
                     say "$x1, $x2, $x3, $x4, $x5, $x6"
                  }
               }
            }
         }
      }
   }
}