# This is a 120-character-wide ASCII-encoded make include file.
# =======|=========|=========|=========|=========|=========|=========|=========|=========|=========|=========|=========|
#
# This is "maketail", Robbie Hatley's main makefile includable.
#
# ======================================================================================================================
# RULES FOR USING MAKE IN THIS WORKSPACE:
#
# 1. In each makefile, set COLLECTION to the name of that program collection. For example, in the makefile in
#    /d/rhe/src/librh, set COLLECTION to "Robbie Hatley's Library".
#
# 2. In each makefile, set EXSUFF to the name of that makefile's folder. For example, in the makefile in 
#    /d/rhe/src/Euler, set EXSUFF to "Euler".
#
# 3. In each makefile, set a "vpath" for each kind of source-code file present. For example, in "d/rhe/Euler", write:
#    vpath %.c   /d/rhe/Euler
#    vpath %.cpp /d/rhe/Euler
#
# 4. In each makefile, set the following three variables:
#    ALL        = list of all executable files corresponding to the *.c and *.cpp files in current directory.
#    C_PROGRAMS = list of all executable files corresponding to the *.c           files in current directory.
#    X_PROGRAMS = list of all executable files corresponding to the         *.cpp files in current directory.
#
# 5. Do not put any actual compilation rules directly in makefiles at all! Allow maketail (see rule #3 below)
#    to do all of the actual compilation. The main reason for this is that the first rule of maketail builds
#    target "all", and since first rule is default rule, "all" should be first rule, so that if you just type
#    "make", make will "do the right thing" (namely, build everything that needs to be built).
#
# 6. Include this file, "/d/rhe/src/maketail", at the bottom of all makefiles, like so:
#    include /d/rhe/src/maketail
#
# MAKEFILES IN THIS WORKSPACE WILL NOT WORK RIGHT UNLESS THESE RULES ARE OBEYED.
#
# ======================================================================================================================
# NOTES:
# If run in Windows, makefiles in this workspace will create executable programs with names like "program.exe".
# If run in Linux,   makefiles in this workspace will create executable programs with names like "program".
#
# ======================================================================================================================
# Edit history:
#   Sat Apr 26, 2003: Wrote first draft.
#   Mon Jul 19, 2004: Updated.
#   Tue Jan 18, 2005: Updated.
#   Sun Jan 23, 2005: Corrected some minor errors in comments; added some comments.
#   Sat May 28, 2005: Changed many directories due to my restructuring today of my programing workspace.
#                     Also corrected flaws in library dependency rules.
#   Sat Aug 20, 2005: Various improvements.
#   Sat Jun 24, 2006: Moved some stuff from maketail to here.  Maketail now contains only library-object
#                     make rules and the "rebuild all unconditionally" make rule.
#   Wed Dec 19, 2007: Changed drive of rhe, bin, and scripts from C: to E:.
#   Wed Nov 24, 2010: Changed drive of rhe, bin, and scripts from E: to C: on Sloop.  I might also make
#                     the same change on Brig so that makehead, maketail, and makefiles can be 
#                     synchronized without alteration.
#   Wed Apr 01, 2015: Updated for Cygwin. Now used almost solely on Ketch.
#   Sun Feb 21, 2016: Subsumed makehead into maketail.
#   Wed Mar 23, 2016: Cut out a lot of commentary and put it in separate file.
#   Sat Apr 09, 2016: Got rid of "-pedantic" because I'm interested in enabling and using GNU extensions to
#                     the C and C++ programming languages. Also got rid multiple warning levels. Warnings are 
#                     now determined only by language and usage, and lots of warnings are always turned on.
#   Sun Oct 15, 2017: Converted paths to indicate that the "rhe" directory is now "/cygdrive/d/rhe",  
#                     not "/rhe" as it was in the past. That's because "/cygdrive/d/rhe" is now ~ , in order
#                     to have rhe backed-up whenever my D and E drives on Ketch and Galleon are backed-up.
#   Tue Jan 23, 2018: Minor corrections in some comments.
#   Wed Feb 07, 2018: Added -lncurses .
#   Thu Feb 21, 2018: Added rhncgraphics module.
#   Fri Feb 23, 2018: Subsumed librhc.a into librh.a .
#   Mon Mar 05, 2018: Move home dir to /home (for all users). That way, Ketch-Win10, Galleon-WinXP, and 
#                     Galleon-Linux all have separate .bashrc files, on C: drives, so that they don't
#                     Step on each other. Also, renamed "C:\cygwin64" to "C:\cygwin" to mirror Galleon
#                     so that makefiles can stay the same. Also, instituted HOST and OSTYPE checks in
#                     maketail in order to set platform. Also, now sending each platform's *.exe files
#                     to a separate folder: Win64 -> /rhe/bin64 , Win32 -> /rhe/bin32 , Linux -> /rhe/binli
#                     Also, moved setting of EXEDIR_ROOT and LIBDIR to above vpaths, so vpaths can use them.
#   Thu Dec 19, 2018: I just dramatically changed my exe and lib paths for simplicity, so I also had to change
#                     this file (and .bashrc, and dos_init.bat) to match.
#   Fri Feb 07, 2020: I'm commenting-out standard selection, because it's already defaulting to 
#                     gnu11 & gnu++14 as of Feb 7, 2020, which is exactly what I want.
#   Sat Jan 15, 2022: Restructured for use with Linux + Windows.
#   Tue Jan 18, 2022: Updated paths to start with "/d/", and clarified instructions & comments.
# 

# ======================================================================================================================
# SET DIRECTORIES:

   INCDIR    := /d/rhe/include
   LIBSRCDIR := /d/rhe/src/librh
ifeq ($(PLATFORM),Win64)
   EXEDIR    := /d/rhe/bin_cyg/$(EXSUFF)
   LIBDIR    := /d/rhe/lib_cyg
   MACROS    := -DPLATFORM_IS_WIN64 -D_GNU_SOURCE
else ifeq ($(PLATFORM),Linux)
   EXEDIR    := /d/rhe/bin_lin/$(EXSUFF)
   LIBDIR    := /d/rhe/lib_lin
   MACROS    := -DPLATFORM_IS_LINUX -D_GNU_SOURCE
else
   $(error Error: Unknown PLATFORM)
endif

# Announce platform and directories:
$(info $$PLATFORM  is ${PLATFORM})
$(info $$INCDIR    is ${INCDIR})
$(info $$LIBSRCDIR is ${LIBSRCDIR})
$(info $$LIBDIR    is ${LIBDIR})
$(info $$EXEDIR    is ${EXEDIR})

# ======================================================================================================================
# Set vpaths to tell GNU Make where to look for headers, objects, libraries, and executables:
vpath %.h   $(INCDIR)
vpath %.hpp $(INCDIR)
vpath %.o   $(LIBDIR)
vpath %.a   $(LIBDIR)
vpath %.exe $(EXEDIR)
vpath %     $(EXEDIR)
# Note that these are separate from variables which tell gcc & g++ where to find files; vpaths tell Make ITSELF 
# where to find files. This helps it navigate dependencies. Also note that while vpaths for %.c and %.cpp are in
# each makefile (because they're directory-specific), the six vpaths above are in maketail only because they are
# the same for all program collections.

# ======================================================================================================================
# SET VARIABLES:

# RH library file:
LIB := $(LIBDIR)/librh.a

# C Library Objects:
LIBRARY_OBJECTS_C :=     \
$(LIB)(rhmathc.o)        \
$(LIB)(rhutilc.o)        \
$(LIB)(rhncgraphics.o)

# C++ Library Objects:
LIBRARY_OBJECTS_X :=     \
$(LIB)(rhmath.o)         \
$(LIB)(rhutil.o)         \
$(LIB)(rhdir.o)          \
$(LIB)(rhbitmap.o)       \
$(LIB)(rhregex.o)

# C Header Files:
HEADERS_C :=             \
$(INCDIR)/rhdefines.h    \
$(INCDIR)/rhmathc.h      \
$(INCDIR)/rhutilc.h      \
$(INCDIR)/rhncgraphics.h

# C++ Header Files:
HEADERS_X :=             \
$(INCDIR)/rhmath.hpp     \
$(INCDIR)/rhutil.hpp     \
$(INCDIR)/rhregex.hpp    \
$(INCDIR)/rhdir.hpp      \
$(INCDIR)/rhbitmap.hpp

# C Preprocessor flags:
PP = -I $(INCDIR) $(MACROS)

# C warning flags:
WC := -Wall -Wextra -Wfloat-equal -Wshadow -Wcast-qual \
   -Wcast-align -Wconversion -Wcomments -Wundef -Wunused-macros \
   -Wold-style-definition -Wnested-externs

# C++ warning flags:
WX := -Wall -Wextra -Wfloat-equal -Wshadow -Wcast-qual \
   -Wcast-align -Wconversion -Wcomments -Wundef -Wunused-macros \
   -Wold-style-cast -Woverloaded-virtual -Wno-deprecated-declarations

# C and C++ compilation flags. -Os optimizes for smallest size, and -s also
# decreases size by stripping-away the symbol table. I'm commenting-out
# standard selection, becuase it's already defaulting to gnu11 & gnu++14
# as of Feb 7, 2020: 
ifdef DEBUG
  CCE := -finput-charset=UTF-8 -fextended-identifiers -g -Og -std=gnu17   -fsanitize=address
  CXE := -finput-charset=UTF-8 -fextended-identifiers -g -Og -std=gnu++17 -fsanitize=address
else
  CCE := -finput-charset=UTF-8 -fextended-identifiers -s -Ofast -std=gnu17  
  CXE := -finput-charset=UTF-8 -fextended-identifiers -s -O2 -std=gnu++17
endif

# C & C++ Library compilation flags (DON'T strip symbol table, compile to object, DON'T link):
ifdef DEBUG
  CCL := -finput-charset=UTF-8 -std=gnu17   -c -g -Og
  CXL := -finput-charset=UTF-8 -std=gnu++17 -c -g -Og
else
  CCL := -finput-charset=UTF-8 -std=gnu17   -c -Ofast
  CXL := -finput-charset=UTF-8 -std=gnu++17 -c -O2
endif

# C & C++ Assembly compilation flags (compile to assembly language, don't run assembler, 
# don't run linker, don't strip symbol table, and don't optimize):
  CCA := -finput-charset=UTF-8 -std=gnu17   -S
  CXA := -finput-charset=UTF-8 -std=gnu++17 -S

# Library directories flags (tells the linker what directories to look in to find libraries):
LIBDIRS := -L$(LIBDIR) -L/lib -L/usr/lib

# Library flags (tells the linker what libraries to look in to resolve external references):
LIBS := -lrh -lncurses -lname -lgmp -lm -lquadmath # -lasan -lfl -ly

# C Compilation Command string:
COMPILE_CE = gcc $(PP) $(WC) $(CCE) $< $(LIBDIRS) $(LIBS) -o $(EXEDIR)/$@

# C Library Compilation String (compile and assemble, no strip, no linker flags, 
# no libraries because not linking, and output to $(LIBDIR) rather than $(EXEDIR)):
COMPILE_CL = gcc $(PP) $(WC) $(CCL) $< -o $(LIBDIR)/$%

# C Assembly Compilation String (compile, don't assemble, no strip, no link):
COMPILE_CA = gcc $(PP) $(WC) $(CCA) $< -o ./$@

# C++ Compilation Command String:
COMPILE_XE = g++ $(PP) $(WX) $(CXE) $< $(LIBDIRS) $(LIBS) -o $(EXEDIR)/$@

# C++ Library Compilation String (compile and assemble, no strip, no linker flags, 
# no libraries because not linking, and output to $(LIBDIR) rather than $(EXEDIR)):
COMPILE_XL = g++ $(PP) $(WX) $(CXL) $< -o $(LIBDIR)/$%

# C++ Assembly Compilation String (compile, don't assemble, no strip, no link):
COMPILE_XA = g++ $(PP) $(WX) $(CXA) $< -o ./$@

# ======================================================================================================================
# DECLARE PHONY TARGETS:

.PHONY: all rebuild Telcontar

# ======================================================================================================================
# MAKE ALL (SINCE THIS IS THE FIRST ACTUAL RULE, THIS IS THE DEFAULT RULE):

# (NOTE: Don't set variable "ALL" to all corresponding exe files here, because not all projects even INVOLVE 
# exe files. For example, /d/rhe/src/librh contains cpp files for the building of objects, not programs,
# and /d/rhe/src/jive contains "*.l" source files which are in lex, which are first compiled by flex to c then
# compiled by gcc to exe.)

# Make dummy target "all" dependent on $(ALL):
all: $(ALL)
	@echo $(COLLECTION) Program Collection is up to date.


# ======================================================================================================================
# MAKE REBUILD:

# Make each program dependent on Elessar, for rebuild purposes:
$(ALL): $(Elessar)
# (Normally, Elessar remains undefined, so this does nothing. HOWEVER, see below.)

# And the same for library objects:
$(LIBRARY_OBJECTS_C): $(Elessar)
$(LIBRARY_OBJECTS_X): $(Elessar)

# When user types "make rebuild", recursively invoke make with Elessar set to 
# Telcontar:
rebuild:
	make all Elessar=Telcontar
Telcontar:
	@echo Elessar, Elessar, why do thy kinfolk wander afar?
# Since Telcontar is not the name of an actual file, make considers it to be  perpetually
# more "up-to-date" than any target it is a prerequisite of; hence if a makefile including
# this maketail specifies "$(Elessar)" as a prerequisite of all targets, and if a user
# then issues the command "make rebuild", all targets will be rebuilt unconditionally.
# This is an application of the second of these two more-general rules:
# 
# 1. A non-existent   target     is always more OUT-OF-DATE than its prerequisites.
# 2. A non-existent prerequisite is always more  UP-TO-DATE than its target.
# 
# Using either will therefore cause the associated rule to be executed unconditionally.
# This is very useful for forcing things to happen regardless of dates of files.

# ======================================================================================================================
# PATTERN RULES:

# Since GNU make doesn't understand the *.exe extention, I've had to # make my own pattern rules instead of relying on
# the built-in ones in Gnu Make in order to compile programs for Windows.
# 
# And as of 2022-01-08, since I've started compiling for Linux, I needed to add still more rules

# RULES FOR MAKING ASM FILES FROM C OR CPP FILES:

%.asm: %.c
	@echo Using pattern rule %.asm:%.c to compile $*.c to $*.asm:
	-$(COMPILE_CA)
	@echo $@ is up to date.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%.asm: %.cpp
	@echo Using pattern rule %.asm:%.cpp to compile $*.cpp to $*.asm:
	-$(COMPILE_XA)
	@echo $@ is up to date.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# RULES FOR MAKING EXE FILES FROM C OR CPP FILES:

%.exe: %.c
	@echo Using pattern rule %.exe:%.c to compile $*.c to $*.exe:
	-$(COMPILE_CE)
	@echo $@ is up to date.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%.exe: %.cpp
	@echo Using pattern rule %.exe:%.cpp to compile $*.cpp to $*.exe:
	-$(COMPILE_XE)
	@echo $@ is up to date.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# RULES FOR MAKING PROGRAMS WITH NO FILE-NAME EXTENSION FROM C OR C++ FILES (EG, LINUX PROGRAMS):

%: %.c
	@echo Using pattern rule %:%.c to compile $*.c to $*:
	-$(COMPILE_CE)
	@echo $@ is up to date.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%: %.cpp
	@echo Using pattern rule %:%.cpp to compile $*.cpp to $*:
	-$(COMPILE_XE)
	@echo $@ is up to date.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ======================================================================================================================
# LIBRARY DEPENDENCIES:

# Note: LIBRARY_DEPENDANT_PROGRAMS should be defined in the makefile of each
# individual project that involves library-dependent programs. But don't set
# it HERE, because not all project involve library-dependent programs.
# For example, the /d/rhe/src/librh folder; its source files are for building
# objects, not programs.

# MAKE LIBRARY-DEPENDENT PROGRAMS DEPENDENT ON LIBRARY OBJECTS AND HEADERS:
$(C_PROGRAMS) : $(HEADERS_C) $(LIBRARY_OBJECTS_C)
$(X_PROGRAMS) : $(HEADERS_C) $(LIBRARY_OBJECTS_C) $(HEADERS_X) $(LIBRARY_OBJECTS_X)

# ======================================================================================================================
# LIBRARY BUILD RULES:

# C Library Object Build-And-Archive Macro:
define LIB_OBJECT_BUILD_AND_ARCHIVE_C
  $(COMPILE_CL)
  ar -rU $@ $(LIBDIR)/$%
  rm $(LIBDIR)/$%
endef

# C++ Library Object Build-And-Archive Macro:
define LIB_OBJECT_BUILD_AND_ARCHIVE_X
  $(COMPILE_XL)
  ar -rU $@ $(LIBDIR)/$%
  rm $(LIBDIR)/$%
endef

$(LIB)(rhutilc.o) : rhutilc.h rhdefines.h
$(LIB)(rhutilc.o) : $(LIBSRCDIR)/rhutilc.c
	$(LIB_OBJECT_BUILD_AND_ARCHIVE_C)
	@echo rhutilc.o is now updated and archived.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$(LIB)(rhmathc.o) : rhmathc.h rhdefines.h
$(LIB)(rhmathc.o) : $(LIBSRCDIR)/rhmathc.c
	$(LIB_OBJECT_BUILD_AND_ARCHIVE_C)
	@echo rhmathc.o is now updated and archived.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$(LIB)(rhncgraphics.o) : rhncgraphics.h rhdefines.h
$(LIB)(rhncgraphics.o) : $(LIBSRCDIR)/rhncgraphics.c
	$(LIB_OBJECT_BUILD_AND_ARCHIVE_C)
	@echo rhncgraphics.o is now updated and archived.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$(LIB)(rhmath.o) : rhmath.hpp rhdefines.h
$(LIB)(rhmath.o) : $(LIBSRCDIR)/rhmath.cpp
	$(LIB_OBJECT_BUILD_AND_ARCHIVE_X)
	@echo rhmath.o is now updated and archived.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$(LIB)(rhutil.o) : rhutil.hpp rhdefines.h
$(LIB)(rhutil.o) : $(LIBSRCDIR)/rhutil.cpp
	$(LIB_OBJECT_BUILD_AND_ARCHIVE_X)
	@echo rhutil.o is now updated and archived.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$(LIB)(rhdir.o) : rhdir.hpp rhdefines.h
$(LIB)(rhdir.o) : $(LIBSRCDIR)/rhdir.cpp
	$(LIB_OBJECT_BUILD_AND_ARCHIVE_X)
	@echo rhdir.o is now updated and archived.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$(LIB)(rhbitmap.o) : rhbitmap.hpp rhmath.hpp rhdefines.h
$(LIB)(rhbitmap.o) : $(LIBSRCDIR)/rhbitmap.cpp
	$(LIB_OBJECT_BUILD_AND_ARCHIVE_X)
	@echo rhbitmap.o is now updated and archived.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$(LIB)(rhregex.o) : rhregex.hpp rhutil.hpp rhdefines.h
$(LIB)(rhregex.o) : $(LIBSRCDIR)/rhregex.cpp
	$(LIB_OBJECT_BUILD_AND_ARCHIVE_X)
	@echo rhregex.o is now updated and archived.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

